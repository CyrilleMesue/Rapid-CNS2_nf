import java.time.*
Date now = new Date()

params.threads = 64


// minimum average sequence coverage through the mgmt promter region
params.minimum_mgmt_cov = 5

// change according to compute infrastructure- 'lsf', 'slurm', 'local'
// process.executor = 'slurm'

params {
    tracedir = "pipeline_info"
    timestamp = now.format("yyyyMMdd-HH-mm-ss")
    threads = 64
    minimum_mgmt_cov = 5

}

timeline {
    enabled = true
    file = "${params.tracedir}/${params.timestamp}_timeline.html"
}

report {
    enabled = true
    file = "${params.tracedir}/${params.timestamp}_report.html"
}

//cleanup = true 

process {

  withLabel:GPU {
       queue = "gpu"
       containerOptions = '--gpus all --user \$(id -u):\$(id -g) --group-add 100'
  }
  withName:basecalling {
        container = 'ontresearch/dorado'
  }

  withName:mergeBAM {
        container = 'rapid_cns2_v3'
  }

  withName:subsetBAM {
        container = 'rapid_cns2_v3'
  }

  withName:MethylationCalls {
        container = 'ontresearch/modkit'
  }

  withName:VariantCalling{
        container = 'nvcr.io/nvidia/clara/clara-parabricks_4.2.1-1'
  }
  
  withName:StructuralVariants {
        container = 'rapid_cns2_v3'
  }
  withName:AnnotSV {
        container = 'quay.io/biocontainers/annotsv'
  }
  withName:MethylationClassification {
        container = 'rapid_cns2_v3'
  }
  withName:MGMTpromoter {
        container = 'rapid_cns2_v3'
  }
  withName:CopyNumberVariants {
        container = 'rapid_cns2_v3'
  }
  withName:ReportRendering {
        container = 'rapid_cns2_v3'
  }
  withName:MNPFlex {
        container = 'rapid_cns2_v3'
  }





}





docker {
  enabled = true
  temp = 'auto'
}

// For singularity
singularity {
    enabled = true
}